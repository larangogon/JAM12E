<?php

namespace Tests\Feature\Administrator\Api;

use App\Entities\Cart;
use App\Entities\Category;
use App\Entities\Color;
use App\Entities\Product;
use App\Entities\Size;
use App\Entities\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var Collection|Model|mixed
     */
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(\PermissionsTableSeeder::class);

        $this->user = factory(User::class)->create([
            'active' => 1
        ]);
        $this->user->assignRole('Administrator');
        $this->cart = new Cart();

        $this->cart->user_id = $this->user->id;
        $this->cart->save();
    }

    public function testUpdate()
    {
        $this->withoutExceptionHandling();
        $this->seed([
            \ColorSeeder::class,
            \SizeSeeder::class,
            \CategorySeeder::class,
        ]);
        $product = Product::create([
            'name'  => 'new',
            'stock' => 56,
            'price' => 23456,
            'barcode' => '12324345354565',
            'description' => 'jdhfbgyebhsabfreahbfgy',
            'color' => [Color::all()->random()->id],
            'size' => [Size::all()->random()->id],
            'category' => [Category::all()->random()->id],
            'img' => '0af47a0f0bb89e7ce4d88f121faea42b.jpg'
        ]);

        $response = $this->actingAs($this->user, 'api')
            ->putJson(route('product.update', $product->id), [
                'name'  => 'nameup',
                'stock' => $product->stock,
            ]);

        $response
            ->assertStatus(200);

        $this->assertDatabaseHas('products', [
            'name'  => 'nameup',
            'stock' => $product->stock,
        ]);
    }

    public function testStore(): void
    {
        $this->withoutExceptionHandling();
        $this->seed([
            \ColorSeeder::class,
            \SizeSeeder::class,
            \CategorySeeder::class,
        ]);

        $response = $this->actingAs($this->user, 'api')
            ->postJson(route('product.store'), [
                'name'  => 'new',
                'stock' => 56,
                'price' => 23456,
                'barcode' => '12324345354565',
                'description' => 'jdhfbgyebhsabfreahbfgy',
                'color' => [Color::all()->random()->id],
                'size' => [Size::all()->random()->id],
                'category' => [Category::all()->random()->id],
                'img' => '0af47a0f0bb89e7ce4d88f121faea42b.jpg'
            ]);

        $response
            ->assertStatus(200);

        $this->assertDatabaseHas('products', [
            'name'  => 'new'
        ]);
    }

    public function testDestroy()
    {
        $products = Product::create([
            'name'        => 'name',
            'description' => 'description',
            'price'       =>  100000,
            'stock'       => 5,
        ]);

        $response = $this->actingAs($this->user, 'api')
            ->deleteJson(route('product.destroy', $products->id), [
                'id'  => $products->id
            ]);

        $response
            ->assertStatus(200);

        $this->assertDatabaseMissing('products', [
            'id'  => $products->id,
        ]);
    }

    public function testIndex()
    {
        $response = $this->actingAs($this->user, 'api')
            ->getJson(route('product.index'));

        $response
            ->assertStatus(200);
    }
}
