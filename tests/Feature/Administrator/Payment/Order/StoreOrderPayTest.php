<?php

namespace Tests\Feature\Administrator\Payment\Order;

use App\Entities\Cart;
use App\Entities\Order;
use App\Entities\Payment;
use App\Entities\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class StoreOrderPayTest extends TestCase
{
    use RefreshDatabase;

    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(\PermissionsTableSeeder::class);

        $this->user = factory(User::class)->create();
        $this->user->assignRole('Administrator');

        $this->cart = new Cart();
        $this->cart->user_id = $this->user->id;
        $this->cart->save();
    }

    /**
     * @return void
     */
    public function testOrderShowv(): void
    {
        $this->withoutMiddleware();
        $this->withoutExceptionHandling();

        $response = $this->actingAs($this->user)
            ->get(route('orders.showv', $this->user->id));

        $response->assertStatus(200);
    }

    public function testUpdatePay(): void
    {
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();

        $this->order = new Order();

        $this->order->user_id = $this->user->id;
        $this->order->total   = $this->user->cart->total = '6778999';

        $this->order->save();

        $this->payment = new Payment();

        $this->payment->order_id    = $this->order->id;
        $this->payment->processUrl  = 'https://test.placetopay.com/redirection/session/401660/f355a2ce680602583c87b9423e5699d8' ;
        $this->payment->requestId   = '401660';
        $this->payment->status      = 'PENDING' ;

        $this->payment->save();

        $response = $this->actingAs($this->user)
            ->put(route('orders.update', $this->order->id), [
                'internalReference' => '1494590937',
                'status'            => 'APPROVED',
                "message"           => 'La peticiÃ³n ha sido aprobada exitosamente',
                'amount'            => '6778999',
                'document'          => '1234566',
                'name'              => 'johanna',
                'email'             => 'johannitaarango@gmail.com',
                'mobile'            => '12345667',
                'locale'            => 'es_CO',
            ]);

        $response
            ->assertStatus(200);

        $this->assertDatabaseHas('orders', [
            'id'     => $this->order->id,
            'status' => 'APPROVED',
        ]);
    }

    public function testDestroyOrder(): void
    {
        $this->withoutExceptionHandling();

        $this->order = new Order();

        $this->order->id = 4;
        $this->order->user_id = $this->user->id;
        $this->order->total   = $this->user->cart->total = '6778999';

        $this->order->save();

        $this->payment = new Payment();

        $this->payment->order_id    = $this->order->id;
        $this->payment->processUrl  = 'https://test.placetopay.com/redirection/session/412446/41173d8c3e45052f2e61de558f9baeb6' ;
        $this->payment->requestId   = '412446';
        $this->payment->status      = 'APROVED' ;

        $this->payment->save();

        Order::destroy($this->order->id = 4);

        $response = $this->actingAs($this->user)
            ->post(route('orders.reversePay', $this->order->id), [
                'internalReference' => '1495465116',
                'status'            => 'APPROVED',
                "message"           => 'La peticiÃ³n ha sido aprobada exitosamente',
                'amount'            => '6778999',
                'document'          => '1234566',
                'name'              => 'admin',
                'email'             => 'johannitaarango@gmail.com',
                'mobile'            => '12345667',
                'locale'            => 'es_CO',
            ]);

        $response
            ->assertStatus(302);

        $this->assertDatabaseMissing('orders', [
            'id'  => $this->order->id = 4,
        ]);
    }
}
