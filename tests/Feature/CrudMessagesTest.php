<?php

namespace Tests\Feature;

use App\Entities\Cart;
use App\Entities\Message;
use App\Entities\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CrudMessagesTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model|mixed
     */
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();

        $this->seed(\PermissionsTableSeeder::class);
        $this->user = factory(User::class)->create(
            ['id' => 1,]
        );

        $this->user->assignRole('Administrator');

        $this->cart =  new Cart();
        $this->cart->user_id = $this->user->id;
        $this->cart->save();
    }

    public function testIndex(): void
    {
        $response = $this->actingAs($this->user, 'web')
            ->get(route('messages.index'));

        $response
            ->assertStatus(200)
            ->assertViewIs('messages.index');
    }

    public function testNotificationsIndex(): void
    {
        $response = $this->actingAs($this->user, 'web')
            ->get(route('notifications.index'));

        $response
            ->assertStatus(200)
            ->assertViewIs('notifications.index');
    }

    public function testStore(): void
    {
        $response = $this->actingAs($this->user, 'web')
            ->post(route('messages.store'), [
                'body'  => 'holaAdmin',
                'sender_id' => 1,
                'recipient_id' => 1,
            ]);

        $response
            ->assertStatus(302);

        $this->assertDatabaseHas('messages', ['body' => 'holaAdmin']);
    }

    public function testDestroy(): void
    {
        $message = Message::create([
            'body'  => 'hola',
            'sender_id' => 1,
            'recipient_id' => 1,
        ]);

        $response = $this->actingAs($this->user)
            ->delete(route('messages.destroy', $message->id), [
                'id' => $message->id
            ]);

        $response
            ->assertStatus(302);

        $this->assertDatabaseMissing('messages', [
            'id'  => $message->id,
        ]);
    }
}
